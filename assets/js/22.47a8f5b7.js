(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{227:function(v,_,a){"use strict";a.r(_);var e=a(0),t=Object(e.a)({},(function(){var v=this,_=v.$createElement,a=v._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[a("h1",{attrs:{id:"java面试（六）：java垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java面试（六）：java垃圾回收"}},[v._v("#")]),v._v(" Java面试（六）：Java垃圾回收")]),v._v(" "),a("h2",{attrs:{id:"对象被判定为垃圾的标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象被判定为垃圾的标准"}},[v._v("#")]),v._v(" 对象被判定为垃圾的标准")]),v._v(" "),a("h3",{attrs:{id:"引用计数算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用计数算法"}},[v._v("#")]),v._v(" 引用计数算法")]),v._v(" "),a("p",[v._v("引用计数算法通过判断对象的引用数量来决定对象是否可以被回收。每个对象实例都有一个引用计数器，被引用则+1，完成引用则-1。任何引用计数都为0的对象实例都可以被当做垃圾收集。")]),v._v(" "),a("ul",[a("li",[v._v("优点：执行效率高，程序执行受影响小")]),v._v(" "),a("li",[v._v("缺点：无法检测出循环引用的情况，容易导致内存泄漏")])]),v._v(" "),a("h3",{attrs:{id:"可达性分析算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可达性分析算法"}},[v._v("#")]),v._v(" 可达性分析算法")]),v._v(" "),a("p",[v._v("可达性分析算法通过判断对象的引用链是否可达来决定对象是否可以被回收。引用链从 "),a("code",[v._v("GC ROOTS")]),v._v(" 向下搜索，如果某个对象不在任何引用链上，则可被判定为回收。")]),v._v(" "),a("p",[v._v("可以作为 "),a("code",[v._v("GC ROOTS")]),v._v(" 的对象：")]),v._v(" "),a("ul",[a("li",[v._v("虚拟机栈中引用的对象（栈帧中的本地变量表）")]),v._v(" "),a("li",[v._v("方法区中常量、类静态属性引用的对象")]),v._v(" "),a("li",[v._v("本地方法栈中 "),a("code",[v._v("JNI(native)")]),v._v(" 方法的引用对象")]),v._v(" "),a("li",[v._v("活跃线程中的对象")])]),v._v(" "),a("h2",{attrs:{id:"垃圾回收算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[v._v("#")]),v._v(" 垃圾回收算法")]),v._v(" "),a("h3",{attrs:{id:"标记-清除算法（mark-and-sweep）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法（mark-and-sweep）"}},[v._v("#")]),v._v(" 标记-清除算法（Mark and Sweep）")]),v._v(" "),a("ul",[a("li",[a("p",[v._v("标记：从根集合进行扫描，对存活的对象进行标记")])]),v._v(" "),a("li",[a("p",[v._v("清除：对堆内存从头到尾进行线性遍历，回收不可达对象")])]),v._v(" "),a("li",[a("p",[v._v("缺点：回收会产生大量不连续的内存空间碎片，在为较大的对象分配内存空间时可能因找不到足够大的连续内存空间而触发另一次垃圾回收")])])]),v._v(" "),a("h3",{attrs:{id:"复制算法（copying）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复制算法（copying）"}},[v._v("#")]),v._v(" 复制算法（Copying）")]),v._v(" "),a("p",[v._v("复制算法将内存划分为两个内存空间，在某一时刻，对象只能分配在其中一块空间（活跃空间），而另一块空间（空闲空间）是空闲的，当进行垃圾回收时，"),a("code",[v._v("GC")]),v._v(" 线程会将活跃空间内所有存活的对象复制到空闲空间，且严格按照内存地址依次排列，同时存活对象的引用地址会指向新的内存地址。活跃空间中剩余的对象被垃圾回收，活跃空间成为空闲空间，而原来的空闲空间成为活跃空间。")]),v._v(" "),a("ul",[a("li",[v._v("优点：解决了内存碎片化的问题；顺序分配内存，简单高效；适用于对象存活率不高的场景")]),v._v(" "),a("li",[v._v("缺点：在对象存活率较高的情况下，复制算法的效率就会降低；复制算法造成了一半内存空间的浪费")])]),v._v(" "),a("h3",{attrs:{id:"标记-整理算法（compacting）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理算法（compacting）"}},[v._v("#")]),v._v(" 标记-整理算法（Compacting）")]),v._v(" "),a("p",[v._v("标记-整理算法从根集合进行扫描，对存活的对象进行标记，在垃圾回收时将存活的对象移动到内存的一端依次排列，移动完成后将其它内存空间的对象空间回收。")]),v._v(" "),a("ul",[a("li",[v._v("优点：避免了内存碎片化；不需要浪费一半的内存空间；适用于内存存活率较高的场景")]),v._v(" "),a("li",[v._v("缺点：在标记-整理算法的基础上还进行了对象移动，成本更高")])]),v._v(" "),a("h3",{attrs:{id:"分代收集算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分代收集算法"}},[v._v("#")]),v._v(" 分代收集算法")]),v._v(" "),a("p",[v._v("按照对象生命周期的不同使用不同的垃圾算法。")]),v._v(" "),a("h2",{attrs:{id:"gc-分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gc-分类"}},[v._v("#")]),v._v(" GC 分类")]),v._v(" "),a("ul",[a("li",[a("code",[v._v("Minor GC")]),v._v("：年轻代垃圾回收")]),v._v(" "),a("li",[a("code",[v._v("Full GC")]),v._v("：老年代垃圾回收，伴随着年轻代垃圾收集")])]),v._v(" "),a("h3",{attrs:{id:"年轻代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#年轻代"}},[v._v("#")]),v._v(" 年轻代")]),v._v(" "),a("p",[v._v("年轻代分为 "),a("code",[v._v("Eden")]),v._v(" 区和两个 "),a("code",[v._v("Survivor")]),v._v(" 区，新对象一般分配在 "),a("code",[v._v("Eden")]),v._v(" 区或其中一块 "),a("code",[v._v("Survivor")]),v._v(" 区，触发 "),a("code",[v._v("Minor GC")]),v._v(" 后，存活的对象会被复制到空闲的 "),a("code",[v._v("Survivor")]),v._v(" 区，"),a("code",[v._v("Eden")]),v._v(" 区的原来活动的 "),a("code",[v._v("Survivor")]),v._v(" 区中剩余的对象会被垃圾回收。")]),v._v(" "),a("h3",{attrs:{id:"老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#老年代"}},[v._v("#")]),v._v(" 老年代")]),v._v(" "),a("p",[v._v("一般存放生命周期较长的对象和大对象，采用标记-清除算法或标记-整理算法进行垃圾回收。"),a("code",[v._v("Full GC")]),v._v(" 的速度慢得多，频率低。")]),v._v(" "),a("h3",{attrs:{id:"对象如何晋升到老年代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象如何晋升到老年代"}},[v._v("#")]),v._v(" 对象如何晋升到老年代")]),v._v(" "),a("ul",[a("li",[v._v("经历一定 "),a("code",[v._v("Minor GC")]),v._v(" 次数后依然存活的对象")]),v._v(" "),a("li",[a("code",[v._v("Survivor")]),v._v(" 中存放不下的对象")]),v._v(" "),a("li",[v._v("新生成的大对象直接在老年代中分配内存")])]),v._v(" "),a("h3",{attrs:{id:"触发-full-gc-的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#触发-full-gc-的情况"}},[v._v("#")]),v._v(" 触发 Full GC 的情况")]),v._v(" "),a("ul",[a("li",[v._v("老年代空间不足")]),v._v(" "),a("li",[v._v("在永久代存在的版本中，永久代空空间不足")]),v._v(" "),a("li",[a("code",[v._v("Minor GC")]),v._v(" 晋升到老年代的平均大小大于老年代的剩余空间")]),v._v(" "),a("li",[v._v("调用 "),a("code",[v._v("System.gc()")])])]),v._v(" "),a("h2",{attrs:{id:"垃圾收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集器"}},[v._v("#")]),v._v(" 垃圾收集器")]),v._v(" "),a("p",[a("img",{attrs:{src:"/img/interview/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E6%90%AD%E9%85%8D%E5%85%B3%E7%B3%BB.png",alt:"垃圾收集器搭配关系"}})]),v._v(" "),a("h3",{attrs:{id:"serial-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-收集器"}},[v._v("#")]),v._v(" Serial  收集器")]),v._v(" "),a("ul",[a("li",[v._v("复制算法")]),v._v(" "),a("li",[v._v("单线程收集，垃圾回收必须暂停所有工作线程")]),v._v(" "),a("li",[v._v("是 "),a("code",[v._v("Client")]),v._v(" 模式下的默认年轻代垃圾收集器")])]),v._v(" "),a("h3",{attrs:{id:"parnew-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parnew-收集器"}},[v._v("#")]),v._v(" ParNew 收集器")]),v._v(" "),a("ul",[a("li",[v._v("复制算法")]),v._v(" "),a("li",[v._v("多线程收集，垃圾回收必须暂停所有工作线程")]),v._v(" "),a("li",[v._v("在多核下执行效率才会优于 "),a("code",[v._v("Serial")]),v._v(" 垃圾收集器")])]),v._v(" "),a("h3",{attrs:{id:"parallel-scavenge-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge-收集器"}},[v._v("#")]),v._v(" Parallel Scavenge 收集器")]),v._v(" "),a("ul",[a("li",[v._v("复制算法")]),v._v(" "),a("li",[v._v("多线程收集")]),v._v(" "),a("li",[v._v("比起关注用户线程停顿时间，更关注系统的吞吐量（即运行用户代码的时间占运行总时间的比例）")]),v._v(" "),a("li",[v._v("在多核下执行才有优势，是 "),a("code",[v._v("Server")]),v._v(" 模式下的默认年轻代垃圾收集器")])]),v._v(" "),a("h3",{attrs:{id:"serial-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serial-old-收集器"}},[v._v("#")]),v._v(" Serial Old 收集器")]),v._v(" "),a("ul",[a("li",[v._v("标记-整理算法")]),v._v(" "),a("li",[v._v("单线程收集，垃圾回收必须暂停所有工作线程")]),v._v(" "),a("li",[v._v("简单高效，是 "),a("code",[v._v("Client")]),v._v(" 模式下的默认老年代收集器")])]),v._v(" "),a("h3",{attrs:{id:"parallel-old-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old-收集器"}},[v._v("#")]),v._v(" Parallel Old 收集器")]),v._v(" "),a("ul",[a("li",[v._v("标记-整理算法")]),v._v(" "),a("li",[v._v("多线程，吞吐量优先")])]),v._v(" "),a("h3",{attrs:{id:"cms-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cms-收集器"}},[v._v("#")]),v._v(" CMS 收集器")]),v._v(" "),a("ul",[a("li",[v._v("标记-清除算法")]),v._v(" "),a("li",[v._v("GC过程短暂停，适合对时延要求较高的服务，用户线程不需要长时间的停顿")])]),v._v(" "),a("h3",{attrs:{id:"g1-收集器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#g1-收集器"}},[v._v("#")]),v._v(" G1 收集器")]),v._v(" "),a("ul",[a("li",[v._v("复制算法、标记-整理算法")]),v._v(" "),a("li",[v._v("使用多个 "),a("code",[v._v("CPU")]),v._v(" 缩短垃圾收集的时间，与用户线程并发执行")]),v._v(" "),a("li",[v._v("使用不同算法对年轻代和老年代进行垃圾收集")]),v._v(" "),a("li",[v._v("空间整合，避免了产生空间碎片")]),v._v(" "),a("li",[v._v("可预测的停顿，可以限定在某个时间范围内的垃圾收集停顿时间")])]),v._v(" "),a("h2",{attrs:{id:"finalize-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#finalize-方法"}},[v._v("#")]),v._v(" finalize() 方法")]),v._v(" "),a("p",[a("code",[v._v("finalize()")]),v._v(" 方法的执行是不确定的，在可达性分析中，一个对象被宣告死亡至少需要经过两次标记，如果对象没有引用链，会被第一次标记；如果被标记对象重载了 "),a("code",[v._v("finalize()")]),v._v(" 方法且未被执行过，就会被放置于 "),a("code",[v._v("F-Queue")]),v._v(" 队列中，一个低优先级的线程会去触发 "),a("code",[v._v("finalize()")]),v._v(" 方法，在此方法中可以觉得对象是否真正需要被回收，但是方法执行随时可能被终止。")]),v._v(" "),a("h2",{attrs:{id:"引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引用"}},[v._v("#")]),v._v(" 引用")]),v._v(" "),a("ul",[a("li",[v._v("强引用：通过 "),a("code",[v._v("new")]),v._v(" 关键字等方式创建出的引用，在抛出 "),a("code",[v._v("OutOfMemmoryError")]),v._v(" 也不会回收强引用的对象，可以将对象设置为 "),a("code",[v._v("null")]),v._v(" 使其被回收。")]),v._v(" "),a("li",[v._v("软引用：对象处在有用但非必须的状态。只有当内存空间不足，"),a("code",[v._v("GC")]),v._v(" 才会回收该对象的内存，可以用来实现内存敏感的高速缓存。")]),v._v(" "),a("li",[v._v("弱引用：发生 "),a("code",[v._v("GC")]),v._v(" 即会被回。")]),v._v(" "),a("li",[v._v("虚引用：在任何时候都有可能被垃圾回收，主要用来跟踪对象被垃圾收集器回收的活动，起哨兵作用，必须和引用队列 "),a("code",[v._v("ReferenceQueue")]),v._v(" 联合使用。")])])])}),[],!1,null,null,null);_.default=t.exports}}]);
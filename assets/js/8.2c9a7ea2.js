(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{230:function(a,t,s){"use strict";s.r(t);var v=s(0),_=Object(v.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"并发编程（一）：并行计算概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发编程（一）：并行计算概念"}},[a._v("#")]),a._v(" 并发编程（一）：并行计算概念")]),a._v(" "),s("h2",{attrs:{id:"何去何从的并行计算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#何去何从的并行计算"}},[a._v("#")]),a._v(" 何去何从的并行计算")]),a._v(" "),s("h3",{attrs:{id:"并行存在的意义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行存在的意义"}},[a._v("#")]),a._v(" 并行存在的意义")]),a._v(" "),s("p",[a._v("与串行程序不同，并行程序的设计和实现异常复杂，不仅仅体现在程序的功能分离上，多线程间的 "),s("code",[a._v("协调性")]),a._v("、"),s("code",[a._v("乱序性")]),a._v("，都会成为程序正确执行的阻碍。但是与一般的用户终端程序相比，服务端程序需要承受更重的用户访问压力，面对复杂的业务模型，并行程序会比串行程序更容易适应业务需求，更容易模拟我们的现实世界。")]),a._v(" "),s("h3",{attrs:{id:"硬件的推波助澜"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#硬件的推波助澜"}},[a._v("#")]),a._v(" 硬件的推波助澜")]),a._v(" "),s("p",[a._v("就目前的科技水平而言，CPU 的计算性能已经到达极限。我们已经不再追求单核的计算速度，而是着迷于如何将多个独立的计算单元整合到单独的 CPU 中，也就是我们所说的 "),s("code",[a._v("多核CPU")]),a._v("。由此，并行计算就会很自然的推广开来。如何让多个 CPU 有效并且正确的 "),s("code",[a._v("协调工作")]),a._v("？多线程间如何保证 "),s("code",[a._v("线程安全")]),a._v("？如何正确理解线程间的 "),s("code",[a._v("无序性")]),a._v("、"),s("code",[a._v("可见性")]),a._v("，如何尽可能提高并行程序设计，如何将串行程序改造为并行程序？而对并行计算的研究，也就是希望在这片黑暗中带来光明。")]),a._v(" "),s("h2",{attrs:{id:"并行计算基本概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并行计算基本概念"}},[a._v("#")]),a._v(" 并行计算基本概念")]),a._v(" "),s("h3",{attrs:{id:"同步和异步"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步和异步"}},[a._v("#")]),a._v(" 同步和异步")]),a._v(" "),s("p",[a._v("同步和异步通常用来形容一次方法调用。")]),a._v(" "),s("ul",[s("li",[a._v("同步方法调用：一旦开始，调用者必须等到方法调用返回后，才能继续后续的行为。")]),a._v(" "),s("li",[a._v("异步方法调用：更像是一个消息传递，一旦开始，方法调用就会立即返回，调用者可以继续后续的操作，而异步方法通常会另在另一个线程中 "),s("code",[a._v("真实地执行")]),a._v("，如果需要返回结果，那么当异步调用真实完成时，则会通知调用者。")])]),a._v(" "),s("h3",{attrs:{id:"并发与并行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发与并行"}},[a._v("#")]),a._v(" 并发与并行")]),a._v(" "),s("ul",[s("li",[a._v("并发：偏重于多个任务，"),s("code",[a._v("交替执行")]),a._v("，多个任务之间可能还是串行的。")]),a._v(" "),s("li",[a._v("并行：是真正意义上的同时执行。")])]),a._v(" "),s("h3",{attrs:{id:"临界区"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#临界区"}},[a._v("#")]),a._v(" 临界区")]),a._v(" "),s("p",[a._v("用来表示一种 "),s("code",[a._v("公共资源")]),a._v("，或是共享数据，一旦临界区资源被某个线程占用，其他线程想要使用这个资源就必须 "),s("code",[a._v("等待")]),a._v("。")]),a._v(" "),s("h3",{attrs:{id:"阻塞和非阻塞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阻塞和非阻塞"}},[a._v("#")]),a._v(" 阻塞和非阻塞")]),a._v(" "),s("p",[a._v("通常用来形容多线程间的相互影响，")]),a._v(" "),s("ul",[s("li",[a._v("阻塞：如一个线程占用的临界区资源，那么其他需要这个资源的线程就必须在这个资源的临界区中进行等待。等待会导致线程挂起，这种情况就是阻塞。")]),a._v(" "),s("li",[a._v("非阻塞：强调没有一个线程能够妨碍其他线程执行。")])]),a._v(" "),s("h3",{attrs:{id:"死锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#死锁"}},[a._v("#")]),a._v(" 死锁")]),a._v(" "),s("p",[a._v("多个线程持有彼此需要的资源不肯释放。")]),a._v(" "),s("h3",{attrs:{id:"饥饿"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#饥饿"}},[a._v("#")]),a._v(" 饥饿")]),a._v(" "),s("p",[a._v("线程因为种种原因无法获得其所需的资源，导致一直无法执行。")]),a._v(" "),s("ul",[s("li",[a._v("线程 "),s("code",[a._v("优先级")]),a._v(" 过低，其它高优先级线程一直占有资源。")]),a._v(" "),s("li",[a._v("某一个线程一直占用关键资源不肯释放。")])]),a._v(" "),s("h3",{attrs:{id:"活锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#活锁"}},[a._v("#")]),a._v(" 活锁")]),a._v(" "),s("p",[a._v("多个线程秉持 "),s("code",[a._v("谦让")]),a._v(" 的原则，主动将资源释放给对方使用，导致资源不断在多个线程之间跳动，没有一个线程能同时拿到所有资源而正常执行。")]),a._v(" "),s("h3",{attrs:{id:"并发级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#并发级别"}},[a._v("#")]),a._v(" 并发级别")]),a._v(" "),s("ul",[s("li",[a._v("阻塞：在所需资源被释放前，当前线程无法继续执行。")]),a._v(" "),s("li",[a._v("无饥饿：锁是 "),s("code",[a._v("公平")]),a._v(" 的，满足先来后到，不允许高优先级线程插队优先获取资源。")]),a._v(" "),s("li",[a._v("无障碍：允许多个线程进入临界区，无障碍的线程一旦检测到数据修改冲突，则对自己的修改进行 "),s("code",[a._v("回滚")]),a._v("，确保数据安全，进行重试。如果没有发生数据竞争，则可以完成修改操作。")]),a._v(" "),s("li",[a._v("无锁："),s("code",[a._v("CAS (Compare And Set)")]),a._v("，线程可能会通过一个无线循环来尝试修改变量，如果没有冲突则修改成功，否则继续尝试修改。")])]),a._v(" "),s("h3",{attrs:{id:"无等待"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无等待"}},[a._v("#")]),a._v(" 无等待")]),a._v(" "),s("p",[a._v("无等待要求所有线程在有限步内完成。通过限制步骤上限来避免饥饿问题。")]),a._v(" "),s("h3",{attrs:{id:"cpu-高速缓存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cpu-高速缓存"}},[a._v("#")]),a._v(" CPU 高速缓存")]),a._v(" "),s("p",[a._v("CPU 执行速度很快，而从内存读取数据和向内存写入数据的过程跟 CPU 执行指令的速度比起来要慢的多。CPU 高速缓存的出现是为了缓解 CPU 和内存之间速度不匹配的问题（CPU - cache - memory）。\n当程序运行时，会将需要的数据从主存中复制一份到 CPU 的高速缓存中，当 CPU 执行指令时直接在缓存中存取数据，在之后的某个时间点，再将缓存中的数据刷新到主存中。\n"),s("img",{attrs:{src:"/img/concurrent/CPU%E9%AB%98%E9%80%9F%E7%BC%93%E5%AD%98.png",alt:"CPU高速缓存"}})]),a._v(" "),s("h2",{attrs:{id:"java-内存模型（jmm）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-内存模型（jmm）"}},[a._v("#")]),a._v(" Java 内存模型（JMM）")]),a._v(" "),s("p",[a._v("为了应对并发程序下一致性和安全性挑战，"),s("code",[a._v("JMM (Java Memory Model)")]),a._v(" 定义了在并行机制下多个线程间有效、正确协同工作的规则。")]),a._v(" "),s("h3",{attrs:{id:"原子性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原子性"}},[a._v("#")]),a._v(" 原子性")]),a._v(" "),s("p",[a._v("原子性指一个操作是不可中断的，即使在多线程的情况下也不会被干扰。")]),a._v(" "),s("h3",{attrs:{id:"可见性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#可见性"}},[a._v("#")]),a._v(" 可见性")]),a._v(" "),s("p",[a._v("可见性指当一个线程修改了一个共享变量的值，其它线程是否能够知道这个修改。"),s("code",[a._v("CPU缓存优化")]),a._v(" （CPU 高速缓存）、 "),s("code",[a._v("指令重排")]),a._v(" 等都可能导致数据修改不能立刻被其它使用的线程察觉。")]),a._v(" "),s("h3",{attrs:{id:"有序性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有序性"}},[a._v("#")]),a._v(" 有序性")]),a._v(" "),s("p",[a._v("程序在执行时，有可能会进行指令重排，CPU 指令执行的顺序不一定和程序的顺序一致。指令重排保证 "),s("code",[a._v("串行语义一致")]),a._v(" （即重排后执行的指令与程序真正执行顺序的语义一致），但不保证多线程语义一致。")]),a._v(" "),s("h4",{attrs:{id:"为什么要指令重排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么要指令重排"}},[a._v("#")]),a._v(" 为什么要指令重排")]),a._v(" "),s("p",[a._v("指令执行是分多个步骤的：")]),a._v(" "),s("ul",[s("li",[a._v("取值 "),s("code",[a._v("IF")])]),a._v(" "),s("li",[a._v("译码和取寄存器操作数 "),s("code",[a._v("ID")])]),a._v(" "),s("li",[a._v("执行和有效地址计算 "),s("code",[a._v("EX")])]),a._v(" "),s("li",[a._v("存储器访问 "),s("code",[a._v("MEM")])]),a._v(" "),s("li",[a._v("写回 "),s("code",[a._v("WB")])])]),a._v(" "),s("p",[a._v("在 CPU 实际工作时，可能使用不同硬件来执行这些步骤，为了提升执行性能，通过流水线执行：\n"),s("img",{attrs:{src:"/img/concurrent/CPU%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%B5%81%E6%B0%B4%E7%BA%BF.png",alt:"CPU指令执行流水线"}}),a._v("\n执行取值操作的硬件 m 在指令 A 中取值完成后，由硬件 n 执行指令 A 的译码，而硬件 m 接着去执行指令 B 的取值。\n流水线操作可以高效提升性能，但是如果发生中断，所有硬件设备会进入一个停顿期，严重影响性能：\n"),s("img",{attrs:{src:"/img/concurrent/CPU%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%B8%AD%E6%96%AD.png",alt:"CPU指令流水线中断"}}),a._v("\n类似一个 "),s("code",[a._v("A = B + C")]),a._v(" 的操作，LW 表示 load，如 LW R1 B 表示将 B 的值加载到 R1 寄存器，ADD R3 R2 R1 表示把 R2、R1 的值相加，并放到 R3 中。SW 表示 store，SW A R3 就是把 R3 寄存器的值保存到变量 A 中。ADD 操作在执行时由于 LW R2 C 指令没有执行完成，R2 中的数据没有准备好，所以发生了停顿，后面的指令因此都慢了一个节拍。")]),a._v(" "),s("p",[s("img",{attrs:{src:"/img/concurrent/%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%90%8E%E7%9A%84CPU%E6%B5%81%E6%B0%B4%E7%BA%BF.png",alt:"指令重排后的CPU流水线"}})]),a._v(" "),s("p",[a._v("而通过对 CPU 指令顺序进行重排，即有可能 "),s("em",[a._v("在不影响程序语义的情况下消除停顿")]),a._v("。由此可见，指令重排对提高 CPU 处理性能是十分必要的。")]),a._v(" "),s("h4",{attrs:{id:"happens-before-规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#happens-before-规则"}},[a._v("#")]),a._v(" Happens-Before 规则")]),a._v(" "),s("p",[a._v("并非所有指令都可以进行重排，指令重排有一定的规则：")]),a._v(" "),s("ul",[s("li",[a._v("程序顺序原则，一个线程内保证语义的串行性。")]),a._v(" "),s("li",[s("code",[a._v("volatile")]),a._v(" 原则："),s("code",[a._v("volatile")]),a._v(" 变量的写，先发生于读，保证了变量的可见性。")]),a._v(" "),s("li",[a._v("锁规则：解锁，必然发生于随后的加锁前")]),a._v(" "),s("li",[a._v("传递性，a 先于 b，b 先于 c，那么 a 必然先于 c")]),a._v(" "),s("li",[a._v("线程的 "),s("code",[a._v("start()")]),a._v(" 方法先于它的每一个动作")]),a._v(" "),s("li",[a._v("线程的所有操作先于线程的终结（"),s("code",[a._v("Thread.join()")]),a._v("）")]),a._v(" "),s("li",[a._v("线程的中断先于被中断线程的代码")]),a._v(" "),s("li",[a._v("对象的构造函数执行、结束，先于 "),s("code",[a._v("finalize()")]),a._v(" 方法")])]),a._v(" "),s("h2",{attrs:{id:"java-并行程序基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java-并行程序基础"}},[a._v("#")]),a._v(" Java 并行程序基础")]),a._v(" "),s("h3",{attrs:{id:"进程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进程"}},[a._v("#")]),a._v(" 进程")]),a._v(" "),s("p",[a._v("进程（"),s("code",[a._v("Process")]),a._v("）是计算机中的程序关于某数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位，是操作系统结构的基础。在面向进程设计的计算机结构中，进程是程序的基本执行实体；在面向线程设计的计算机结构中，进程是线程的容器。程序是指令、数据及其组织形式的描述，进程是程序的实体。")]),a._v(" "),s("h3",{attrs:{id:"线程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程"}},[a._v("#")]),a._v(" 线程")]),a._v(" "),s("p",[a._v("线程（"),s("code",[a._v("Thread")]),a._v("）是轻量级进程，是程序执行的最小单位。因为线程间切换和调度的成本远小于进程，所以使用多线程去进行并发程序设计。")]),a._v(" "),s("h4",{attrs:{id:"线程状态"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程状态"}},[a._v("#")]),a._v(" 线程状态")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("NEW")]),a._v("：线程创建，还没开始执行。")]),a._v(" "),s("li",[s("code",[a._v("RUNNABLE")]),a._v("：线程执行状态，此时所需的一切资源都已经准备好了。")]),a._v(" "),s("li",[s("code",[a._v("BLOCKED")]),a._v("：线程在执行过程中遇到 "),s("code",[a._v("synchronized")]),a._v(" 同步块，进入阻塞状态，线程暂停执行，直到获取请求的锁。")]),a._v(" "),s("li",[s("code",[a._v("WAITING")]),a._v("：线程进入无时间限制的等待。")]),a._v(" "),s("li",[s("code",[a._v("TIMED_WAITING")]),a._v("：线程进入有时限的等待。")]),a._v(" "),s("li",[s("code",[a._v("TERNIMATED")]),a._v("：线程结束。")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/img/concurrent/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2.png",alt:"线程状态转换"}})]),a._v(" "),s("h4",{attrs:{id:"线程创建"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程创建"}},[a._v("#")]),a._v(" 线程创建")]),a._v(" "),s("ul",[s("li",[a._v("继承 "),s("code",[a._v("Thread")]),a._v(" 类")]),a._v(" "),s("li",[a._v("实现 "),s("code",[a._v("Runnable")]),a._v(" 接口")]),a._v(" "),s("li",[a._v("实现 "),s("code",[a._v("Callable")]),a._v(" 接口")])]),a._v(" "),s("h4",{attrs:{id:"线程停止"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程停止"}},[a._v("#")]),a._v(" 线程停止")]),a._v(" "),s("p",[a._v("使用线程的 "),s("code",[a._v("stop()")]),a._v(" 方法可以立即停止线程，但是是在线程执行过程中停止，容易造成数据不一致的问题，不建议使用。")]),a._v(" "),s("h4",{attrs:{id:"线程中断"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程中断"}},[a._v("#")]),a._v(" 线程中断")]),a._v(" "),s("p",[a._v("使用线程的 "),s("code",[a._v("interrupt()")]),a._v(" 方法通知线程中断，收到中断通知的线程不会立即退出，而是由线程自行决定退出时机，为了避免造成数据不一致的问题，通过 "),s("code",[a._v("isInterrupted()")]),a._v(" 方法获取线程的中断状态。"),s("code",[a._v("wait()")]),a._v("、"),s("code",[a._v("sleep()")]),a._v(" 等方法被中断会抛出 "),s("code",[a._v("InterruptedException")]),a._v(" 异常，此异常会清除线程的中断标记。")]),a._v(" "),s("h4",{attrs:{id:"等待（wait）和通知（notify）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#等待（wait）和通知（notify）"}},[a._v("#")]),a._v(" 等待（wait）和通知（notify）")]),a._v(" "),s("p",[s("code",[a._v("Object")]),a._v(" 类提供了 "),s("code",[a._v("wait()")]),a._v(" 和 "),s("code",[a._v("notify()")]),a._v(" 方法，意味任何对象都能调用这两个方法， "),s("code",[a._v("wait()")]),a._v(" 方法必须包含在 "),s("code",[a._v("synchronized")]),a._v(" 语句块中，只有获取了目标对象的监视器，才能调用这两个方法。当在一个对象实例上调用 "),s("code",[a._v("wait()")]),a._v(" 方法，当前线程就会进入目标对象的等待队列，此队列可能会包含多个等待目标对象的线程，当 "),s("code",[a._v("notify()")]),a._v(" 方法被调用，就会从等待队列中随机唤醒一个线程，继续执行。当对象的 "),s("code",[a._v("notifyAll()")]),a._v(" 方法被调用，等待队列中的所有对象都会被唤醒。")]),a._v(" "),s("h5",{attrs:{id:"wait-和-sleep-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#wait-和-sleep-的区别"}},[a._v("#")]),a._v(" wait() 和 sleep() 的区别")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("wait()")]),a._v(" 方法可被唤醒，"),s("code",[a._v("sleep()")]),a._v(" 方法只能一直休眠到指定时间。")]),a._v(" "),s("li",[s("code",[a._v("wait()")]),a._v(" 方法会释放目标对象的锁，"),s("code",[a._v("sleep()")]),a._v(" 方法不会释放任何资源。")])]),a._v(" "),s("h4",{attrs:{id:"挂起（suspend）和继续执行（resume）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挂起（suspend）和继续执行（resume）"}},[a._v("#")]),a._v(" 挂起（suspend）和继续执行（resume）")]),a._v(" "),s("p",[a._v("使用线程的 "),s("code",[a._v("suspend()")]),a._v(" 方法会使线程暂停，但是并不会释放任何锁资源，直到执行此线程的 "),s("code",[a._v("resume()")]),a._v(" 方法，如果 "),s("code",[a._v("resume()")]),a._v(" 方法先于 "),s("code",[a._v("suspend()")]),a._v(" 方法执行，那么线程就无法被唤醒从而继续执行，也不会释放占有的锁资源，而从线程状态上看，居然还是 "),s("code",[a._v("RUNNABLE")]),a._v("，所以不建议使用挂起的方式去操作线程。")]),a._v(" "),s("h4",{attrs:{id:"等待结束（join）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#等待结束（join）"}},[a._v("#")]),a._v(" 等待结束（join）")]),a._v(" "),s("p",[a._v("在某些时候，一个线程的输入可能会依赖其它线程的输出，这就需要通过使用被依赖线程的 "),s("code",[a._v("join()")]),a._v(" 方法加入当前线程，等待被依赖线程执行结束。")]),a._v(" "),s("h4",{attrs:{id:"谦让（yield）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谦让（yield）"}},[a._v("#")]),a._v(" 谦让（yield）")]),a._v(" "),s("p",[a._v("使用线程的 "),s("code",[a._v("yield()")]),a._v(" 方法会使线程让出 CPU，但不是暂停执行，线程还会进行 CPU 的争夺。如果一个线程不那么重要，或者对应任务的优先级非常低，或者不希望它占用过多的资源，就可以使用 "),s("code",[a._v("yield()")]),a._v(" 方法给予其它线程更多的执行机会。")]),a._v(" "),s("h4",{attrs:{id:"线程组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程组"}},[a._v("#")]),a._v(" 线程组")]),a._v(" "),s("p",[a._v("使用线程组可以对线程进行分组，从而方便管理。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadGroup")]),a._v(" tg "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ThreadGroup")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"tg"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("tg"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"T1"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"守护线程（daemon）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#守护线程（daemon）"}},[a._v("#")]),a._v(" 守护线程（daemon）")]),a._v(" "),s("p",[a._v("守护线程是一种特殊的线程，是系统的守护者，在后台默默完成一些系统性的服务，如垃圾回收、JIT 等。如果用户线程全部结束，那么整个应用程序也应该结束，守护线程也会退出。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),a._v(" t "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 必须在执行 start() 方法之前设置为守护线程")]),a._v("\nt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setDaemon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\nt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("start")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"线程优先级"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线程优先级"}},[a._v("#")]),a._v(" 线程优先级")]),a._v(" "),s("p",[a._v("Java 中的线程可以有优先级，优先级高的线程在竞争资源时会更有优势。线程优先级的范围为 1~10 ，数字越大优先级越高。")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * The minimum priority that a thread can have.\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" MIN_PRIORITY "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * The default priority that is assigned to a thread.\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" NORM_PRIORITY "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * The maximum priority that a thread can have.\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" MAX_PRIORITY "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h4",{attrs:{id:"volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[a._v("#")]),a._v(" volatile")]),a._v(" "),s("p",[a._v("使用 "),s("code",[a._v("volatile")]),a._v(" 关键字可以通知虚拟机不能随意变动、优化目标指令，被此关键字修饰的变量被修改后，应用程序范围内所有的线程都能“看到”这个改动。"),s("code",[a._v("volatile")]),a._v(" 关键字主要作用包括：")]),a._v(" "),s("ul",[s("li",[a._v("保证可见性：对修饰变量的修改能为其它线程所知，但是写冲突仍可能导致错误。")]),a._v(" "),s("li",[a._v("保证有序性：不能随意变动、优化指令。")])]),a._v(" "),s("h4",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[a._v("#")]),a._v(" synchronized")]),a._v(" "),s("p",[a._v("当多个线程同时写一个数据时，容易产生写冲突，Java 提供了用于线程间同步的关键字 "),s("code",[a._v("synchronized")]),a._v(" ，它的作用是对同步代码进行加锁，使得每次只能有一个线程进入同步代码块，从而保证线程间的安全性，"),s("code",[a._v("synchronized")]),a._v(" 关键字有多种用法：")]),a._v(" "),s("ul",[s("li",[a._v("指定加锁对象：对给定对象加锁，进入同步代码块前需要获取给定对象的锁。")]),a._v(" "),s("li",[a._v("直接作用于实例方法，相当于对当前实例加锁，进入同步代码块前需要获取当前实例的锁。")]),a._v(" "),s("li",[a._v("直接作用于静态方法：相当于对当前类加锁，进入同步代码块前需要获取当前类的锁。\n"),s("code",[a._v("synchronized")]),a._v(" 限制每次只有一个线程可以访问同步代码块，因此即使进行指令重排，串行语义是不会改变的，被 "),s("code",[a._v("synchronized")]),a._v(" 限制的多个线程又可看做是顺序执行的，能够保证可见性和有序性。")])])])}),[],!1,null,null,null);t.default=_.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{233:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"微服务实践（一）：docker-入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务实践（一）：docker-入门"}},[s._v("#")]),s._v(" 微服务实践（一）：Docker 入门")]),s._v(" "),a("h2",{attrs:{id:"虚拟机与容器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟机与容器"}},[s._v("#")]),s._v(" 虚拟机与容器")]),s._v(" "),a("p",[s._v("相对于传统虚拟机，容器不需要 Guest OS 层，可以直接在本地操作系统之上实现应用的隔离。\n"),a("img",{attrs:{src:"/img/microservice/%E8%99%9A%E6%8B%9F%E6%9C%BA%E4%B8%8E%E5%AE%B9%E5%99%A8.png",alt:"虚拟机与容器"}})]),s._v(" "),a("h2",{attrs:{id:"容器的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器的作用"}},[s._v("#")]),s._v(" 容器的作用")]),s._v(" "),a("ul",[a("li",[s._v("简化配置：代码、运行环境、配置可以打包到一个容器中，以简化配置，提高开发效率")]),s._v(" "),a("li",[s._v("代码流水线管理")]),s._v(" "),a("li",[s._v("提高开发效率")]),s._v(" "),a("li",[s._v("隔离应用")]),s._v(" "),a("li",[s._v("整合服务器")]),s._v(" "),a("li",[s._v("调试能力")]),s._v(" "),a("li",[s._v("多租户")]),s._v(" "),a("li",[s._v("快速部署")])]),s._v(" "),a("h2",{attrs:{id:"容器演变历史"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器演变历史"}},[s._v("#")]),s._v(" 容器演变历史")]),s._v(" "),a("h3",{attrs:{id:"传统部署"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#传统部署"}},[s._v("#")]),s._v(" 传统部署")]),s._v(" "),a("p",[s._v("传统部署需要有物理机设备，在物理机上安装操作系统后部署应用。传统部署存在以下缺点：")]),s._v(" "),a("ul",[a("li",[s._v("由于应用依赖各种环境和配置，部署速度慢")]),s._v(" "),a("li",[s._v("硬件系统造成部署成本高")]),s._v(" "),a("li",[s._v("当应用简单时会造成资源的浪费")]),s._v(" "),a("li",[s._v("难以迁移和扩展")]),s._v(" "),a("li",[s._v("会被限定硬件厂商")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/%E4%BC%A0%E7%BB%9F%E9%83%A8%E7%BD%B2.png",alt:"传统部署"}})]),s._v(" "),a("h3",{attrs:{id:"虚拟化技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#虚拟化技术"}},[s._v("#")]),s._v(" 虚拟化技术")]),s._v(" "),a("p",[s._v("对物理服务器的资源（CPU、内存、硬盘等）通过 Hypervisor 做虚拟化，在虚拟化之上安装操作系统，构成虚拟机。这样使得一个物理机部署多个 App，每个 App 独立运行在一个 VM 中。")]),s._v(" "),a("ul",[a("li",[s._v("资源池：物理机资源分配到了不同虚拟机")]),s._v(" "),a("li",[s._v("易扩展：通过虚拟化技术，不需关心物理机，容易对虚拟机扩展")]),s._v(" "),a("li",[s._v("易云化：容易结合商用云服务器使用")]),s._v(" "),a("li",[s._v("消耗资源：每个虚拟机都是一个完整的操作系统，当虚拟机增多时，操作系统本身消耗的资源势必增多")])]),s._v(" "),a("h3",{attrs:{id:"容器技术"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器技术"}},[s._v("#")]),s._v(" 容器技术")]),s._v(" "),a("ul",[a("li",[s._v("对软件及其依赖的标准化打包")]),s._v(" "),a("li",[s._v("应用之间相互隔离")]),s._v(" "),a("li",[s._v("共享同一个 OS Kernel")]),s._v(" "),a("li",[s._v("可以运行在很多主流操作系统上\n容器与虚拟机的区别在于容器是应用层面的隔离，而虚拟机是物理资源层面的隔离，同时，容器和虚拟化技术可以结合使用。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/%E5%AE%B9%E5%99%A8%E4%B8%8E%E8%99%9A%E6%8B%9F%E5%8C%96%E7%9A%84%E5%8C%BA%E5%88%AB.png",alt:"容器与虚拟化的区别"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/%E8%99%9A%E6%8B%9F%E5%8C%96+%E5%AE%B9%E5%99%A8.png",alt:"虚拟化+容器"}})]),s._v(" "),a("h2",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" Docker")]),s._v(" "),a("h3",{attrs:{id:"docker-platform"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-platform"}},[s._v("#")]),s._v(" Docker Platform")]),s._v(" "),a("p",[s._v("Docker 提供了一个开发、打包、运行 app 的平台，把 app 和底层设施隔离开来。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/DockerPlatform.png",alt:"Docker Platform"}})]),s._v(" "),a("p",[s._v("Docker Engine 分为后台进程（dockerd）和 CLI 接口，是一个 C/S 模式的架构，它们之间通过 REST API 通信。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/DockerEngine.png",alt:"Docker Engine"}})]),s._v(" "),a("p",[s._v("Docker client 可以操作 Docker Host 上的镜像和容器，Registry 可以存储用户镜像。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/Docker%E6%9E%B6%E6%9E%84.png",alt:"Docker架构"}})]),s._v(" "),a("h3",{attrs:{id:"安装-docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装-docker"}},[s._v("#")]),s._v(" 安装 Docker")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 安装")]),s._v("\nyum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" docker-io -y\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker版本")]),s._v("\ndocker version\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动Docker")]),s._v("\nsystemctl start docker\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置开机启动")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("chkconfig")]),s._v(" docker on\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置国内镜像源")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"OPTIONS='--registry-mirror=https://mirror.ccs.tencentyun.com'\"")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" /etc/sysconfig/docker\nsystemctl daemon-reload\nsystemctl restart docker\n")])])]),a("h3",{attrs:{id:"docker-image（镜像）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-image（镜像）"}},[s._v("#")]),s._v(" Docker Image（镜像）")]),s._v(" "),a("ul",[a("li",[s._v("文件和 meta data 的集合（root filesystem）")]),s._v(" "),a("li",[s._v("分层，每一层都可以通过添加、改变或删除文件，成为新的镜像")]),s._v(" "),a("li",[s._v("不同镜像可以共享相同的 layer")]),s._v(" "),a("li",[s._v("镜像本身是只读的")])]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/docker%E5%88%86%E5%B1%82%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F.png",alt:"docker分层文件系统"}})]),s._v(" "),a("h4",{attrs:{id:"获取镜像的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取镜像的方式"}},[s._v("#")]),s._v(" 获取镜像的方式")]),s._v(" "),a("ul",[a("li",[s._v("通过 DockerFile 构建")]),s._v(" "),a("li",[s._v("通过 Registry（如 Docker hub）拉取")])]),s._v(" "),a("h3",{attrs:{id:"docker-container（容器）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-container（容器）"}},[s._v("#")]),s._v(" Docker Container（容器）")]),s._v(" "),a("ul",[a("li",[s._v("通过 Image 创建，相当于 Image 的一个实例")]),s._v(" "),a("li",[s._v("在 Image layer 之上建立一个 Container layer（可读写）")]),s._v(" "),a("li",[s._v("Image 负责 App 的存储和分发，Container 负责运行 App")])]),s._v(" "),a("h3",{attrs:{id:"构建-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建-docker-镜像"}},[s._v("#")]),s._v(" 构建 Docker 镜像")]),s._v(" "),a("h4",{attrs:{id:"通过-commit-构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-commit-构建镜像"}},[s._v("#")]),s._v(" 通过 commit 构建镜像")]),s._v(" "),a("p",[s._v("通过交互命令进入某个镜像，配置后通过 exit 命令退出。再通过 docker commit 创建 image。")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker commit -m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MARK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER NAMES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h3",{attrs:{id:"通过-build-构建镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过-build-构建镜像"}},[s._v("#")]),s._v(" 通过 build 构建镜像")]),s._v(" "),a("p",[s._v("1.编写 Dockerfile 文件")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# base image")]),s._v("\nFROM centos\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# install vim")]),s._v("\nRUN yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v("\n")])])]),a("p",[s._v("2.构建镜像")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("docker build -t wch/centos-vim "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n")])])]),a("h3",{attrs:{id:"dockerfile-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dockerfile-使用"}},[s._v("#")]),s._v(" Dockerfile 使用")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 制作base image")]),s._v("\nFROM scratch\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用base image")]),s._v("\nFROM centos\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义Metadata")]),s._v("\nLABEL "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("maintainer")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"wch853@163.com"')]),s._v("\nLABEL "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("version")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')]),s._v("\nLABEL "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("description")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is description"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 执行命令并创建新的Image Layer，使用&&合并多条命令，使用\\换行")]),s._v("\nRUN yum update "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v(" yum "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("\n    python-dev\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器启动时运行的命令；让容器以应用程序或者服务的形式运行；不会被忽略，一定会执行；可以运行一个shell脚本")]),s._v("\nCOPY docker-entrypoint.sh /usr/local/bin\nENTRYPOINT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"docker-entrypoint.sh"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置容器启动后默认执行的命令和参数；如果docker run指定了其它命令，CMD忽略；如果定义了多个CMD，只有最后一个会执行")]),s._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello docker!"')]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设定当前工作目录，没有会自动创建")]),s._v("\nWORKDIR /demo\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加本地文件到指定目录")]),s._v("\nCOPY "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v(" /\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 添加本地文件到指定目录并解压缩")]),s._v("\nADD file.tar /\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 设置常量")]),s._v("\nENV MYSQL_VERSION "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.7")]),s._v("\nRUN "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y mysql-server"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"'),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${MYSQL_VERSION}")]),s._v('"')]),s._v("\n\n")])])]),a("h4",{attrs:{id:"shell-与-exec-格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shell-与-exec-格式"}},[s._v("#")]),s._v(" Shell 与 Exec 格式")]),s._v(" "),a("ul",[a("li",[s._v("Shell 格式")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("RUN "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt-get")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" -y "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Docker!"')]),s._v("\nENV param Docker\nENTRYPOINT "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v('!"')]),s._v("\n")])])]),a("ul",[a("li",[s._v("Exec 格式")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("RUN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"apt-get"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"install"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-y"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"vim"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nCMD "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/echo"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello Docker!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\nENV param Docker\nENTRYPOINT "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"/bin/bash"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"-c"')]),s._v(", "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"echo Hello '),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$name")]),s._v('!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h3",{attrs:{id:"发布-docker-镜像"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布-docker-镜像"}},[s._v("#")]),s._v(" 发布 Docker 镜像")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 登录docker hub")]),s._v("\ndocker login\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 上传docker image")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("image"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" push "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY:TAG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 拉取docker image")]),s._v("\ndocker pull "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY:TAG"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h3",{attrs:{id:"docker-网络"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-网络"}},[s._v("#")]),s._v(" Docker 网络")]),s._v(" "),a("p",[s._v("使用 Docker Network 可以实现容器间的网络连接和隔离。")]),s._v(" "),a("p",[a("img",{attrs:{src:"/img/microservice/DockerNetwork.png",alt:"Docker Network"}})]),s._v(" "),a("h4",{attrs:{id:"bridge"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bridge"}},[s._v("#")]),s._v(" bridge")]),s._v(" "),a("p",[s._v("bridge 是 docker 默认的网络类型，通过 docker network inspect bridge 命令查看该网络的详细信息。\ndocker 启动后在 linux 宿主机上生成名为 docker0 的网桥，docker 容器通过 veth-pair 连接到 docker0 上，不同的 docker 网络因此能够通信。容器通过 docker0 进行 NAT 转换为 eth0 的地址，就能够访问外部网络\n。\n"),a("img",{attrs:{src:"/img/microservice/BridgeNetwork.png",alt:"Bridge Network"}})]),s._v(" "),a("h4",{attrs:{id:"容器间-link"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器间-link"}},[s._v("#")]),s._v(" 容器间 link")]),s._v(" "),a("p",[s._v("容器间可以通过 link 的方式相互依赖，被依赖容器的 name 可以当做容器的 host。")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[s._v("docker run -d --name os2 --link os1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h4",{attrs:{id:"端口映射"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#端口映射"}},[s._v("#")]),s._v(" 端口映射")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建立指定端口的映射关系")]),s._v("\ndocker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 nginx\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 建立随机端口映射关系")]),s._v("\ndocker run -d -P nginx\n")])])]),a("h4",{attrs:{id:"docker-数据持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-数据持久化"}},[s._v("#")]),s._v(" Docker 数据持久化")]),s._v(" "),a("ul",[a("li",[s._v("基于本地文件系统的 Volume，容器启动时通过-v 参数将主机目录作为容器的数据卷。")]),s._v(" "),a("li",[s._v("基于 plugin 的 Volume，支持第三方的存储方案，比如 NAS，aws。")])]),s._v(" "),a("h5",{attrs:{id:"volume-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#volume-类型"}},[s._v("#")]),s._v(" Volume 类型")]),s._v(" "),a("ul",[a("li",[s._v("受管理的 data Volume，由 docker 后台自动创建，名称显示不友好。")]),s._v(" "),a("li",[s._v("绑定挂载的 Volume，具体挂载位置由用户指定。")])]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 将mysql配置文件和数据目录挂载到指定文件和目录")]),s._v("\ndocker run -d -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_PASSWORD")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("pass -e "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("MYSQL_ROOT_HOST")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("% -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3307")]),s._v(":3306 -v d:/docker/mysql/conf/my.cnf:/etc/mysql/my.cnf -v d:/docker/mysql/data:/var/lib/mysql --name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("mysql mysql:5.7\n")])])]),a("h2",{attrs:{id:"docker-常用命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-常用命令"}},[s._v("#")]),s._v(" Docker 常用命令")]),s._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker版本")]),s._v("\ndocker version\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker image列表")]),s._v("\ndocker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\ndocker images\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除Image")]),s._v("\ndocker image "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IMAGE ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ndocker rmi "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" / "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IMAGE ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器列表")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ndocker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 创建容器")]),s._v("\ndocker build -t "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("LOCATION"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看Image分层")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("history")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("IMAGE ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 运行Image")]),s._v("\ndocker run "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Container交互式运行")]),s._v("\ndocker run -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Container后台运行")]),s._v("\ndocker run -d "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 以指定NAME运行容器")]),s._v("\ndocker run --name "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除Container")]),s._v("\ndocker container "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除全部Container")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("rm")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" -aq"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入正在运行的容器")]),s._v("\ndocker "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" /bin/bash\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止正在运行的容器")]),s._v("\ndocker stop "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 启动容器")]),s._v("\ndocker start "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER ID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在容器中修改配置，提交后成为新镜像")]),s._v("\ndocker commit -m "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("MARK"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("CONTAINER NAMES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker网络")]),s._v("\ndocker network inspect bridge\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 端口映射")]),s._v("\ndocker run -d -p "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器端口隐射情况")]),s._v("\ndocker port "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CONTAINER "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("PRIVATE_PORT"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("/PROTO"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器日志")]),s._v("\ndocker logs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("OPTIONS"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" CONTAINER\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker数据卷")]),s._v("\ndocker volume "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ls")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 删除未使用数据卷")]),s._v("\ndocker volume prune\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看docker文件系统")]),s._v("\ndocker system "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("df")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 清除docker缓存")]),s._v("\ndocker system prune\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 目录挂载")]),s._v("\ndocker run -d - "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("v")]),s._v(" /var/logs:/var/lib/logs "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("REPOSITORY"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),a("h2",{attrs:{id:"容器编排"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#容器编排"}},[s._v("#")]),s._v(" 容器编排")]),s._v(" "),a("p",[s._v("多容器的应用启动仅靠手工输入命令是非常困难的，一方面需要根据具体需求创建不同版本、不同数量的容器，另一方面要管理这些容器。这就需要容器编排工具对容器管理实现批处理。")]),s._v(" "),a("h3",{attrs:{id:"docker-compose"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose"}},[s._v("#")]),s._v(" docker-compose")]),s._v(" "),a("p",[s._v("docker-compose 是一个命令行工具，通过定义的 YAML 文件可以管理多个容器。")]),s._v(" "),a("ul",[a("li",[s._v("services：一个 service 代表一个容器，这个容器可以使用 Docker Hub 的镜像来创建，也可以使用本地镜像创建。service 启动类似 docker run 命令，可以指定运行参数。")]),s._v(" "),a("li",[s._v("networks：docker-compose 启动后会生成一个自定义网络。通过 networks 自定义网络，使得不同容器的网络相连接和隔离。")]),s._v(" "),a("li",[s._v("volumes：定义挂载空间。")])]),s._v(" "),a("h4",{attrs:{id:"docker-compose-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-配置文件"}},[s._v("#")]),s._v(" docker-compose 配置文件")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("version: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'3'")]),s._v("\n\nservices:\n  zookeeper:\n    image: zookeeper:3.4.13\n    networks:\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义连接网络")]),s._v("\n      - rpc-bridge\n\n  redis:\n    image: redis:latest\n    command:\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 持久化配置")]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--appendonly yes"')]),s._v("\n    volumes:\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 数据目录挂载")]),s._v("\n      - d:/docker/redis:/data\n    networks:\n      - component-bridge\n\n  mysql:\n    image: mysql:5.7\n    environment:\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 配置环境参数")]),s._v("\n      MYSQL_ROOT_PASSWORD: admin\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 不限制host远程连接")]),s._v("\n      MYSQL_ROOT_HOST: "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"%"')]),s._v("\n    volumes:\n      - d:/docker/mysql/data:/var/lib/mysql\n      - d:/docker/mysql/conf/my.cnf:/etc/mysql/my.cnf\n    networks:\n      - data-bridge\n\n  server:\n    image: my-server:1.0\n    links:\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 关联服务")]),s._v("\n      - mysql\n    command:\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--mysql.address=mysql:3306"')]),s._v("\n    networks:\n      - rpc-bridge\n      - data-bridge\n\n  web:\n    image: my-web:1.0\n    links:\n      - redis\n      - zookeeper\n      - server\n    volumes:\n      - d:/docker/app/logs/course-web:/var/app/logs/course-web\n    command:\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--server.port=8080"')]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--server.host=server"')]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--redis.host=redis"')]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--redis.port=6379"')]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--registry.address=zookeeper:2181"')]),s._v("\n    networks:\n      - rpc-bridge\n      - component-bridge\n      - net-bridge\n\n  api-gateway:\n    image: my-api-gateway:1.0\n    links:\n      - web\n    command:\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--web.host=web"')]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"--web.port=8080"')]),s._v("\n    ports:\n      "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 映射宿主机端口")]),s._v("\n      - "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(":80\n    networks:\n      - net-bridge\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 定义容器网络")]),s._v("\nnetworks:\n  net-bridge:\n    driver: bridge\n  component-bridge:\n    driver: bridge\n  data-bridge:\n    driver: bridge\n  rpc-bridge:\n    driver: bridge\n")])])]),a("h4",{attrs:{id:"docker-compose-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-compose-命令"}},[s._v("#")]),s._v(" docker-compose 命令")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 使用docker-compose后台启动容器")]),s._v("\ndocker-compose -f "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("FILENAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" up -d\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 查看容器状态")]),s._v("\ndocker-compose "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 停止并删除容器")]),s._v("\ndocker-compose down\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 进入容器终端")]),s._v("\ndocker-compose "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 扩容/缩容")]),s._v("\ndocker-compose up --scale "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("SERVICE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("NUM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" -d\n")])])])])}),[],!1,null,null,null);t.default=e.exports}}]);